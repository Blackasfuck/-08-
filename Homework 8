using System;
using System.Collections.Generic;

public interface ICommand
{
    void Execute();
    void Undo();
}

public class Light
{
    public void On() => Console.WriteLine("Свет включен");
    public void Off() => Console.WriteLine("Свет выключен");
}

public class Door
{
    public void Open() => Console.WriteLine("Дверь открыта");
    public void Close() => Console.WriteLine("Дверь закрыта");
}

public class Thermostat
{
    public void IncreaseTemperature() => Console.WriteLine("Температура увеличена");
    public void DecreaseTemperature() => Console.WriteLine("Температура уменьшена");
}

public class LightOnCommand : ICommand
{
    private readonly Light _light;
    public LightOnCommand(Light light) => _light = light;
    public void Execute() => _light.On();
    public void Undo() => _light.Off();
}

public class LightOffCommand : ICommand
{
    private readonly Light _light;
    public LightOffCommand(Light light) => _light = light;
    public void Execute() => _light.Off();
    public void Undo() => _light.On();
}

public class DoorOpenCommand : ICommand
{
    private readonly Door _door;
    public DoorOpenCommand(Door door) => _door = door;
    public void Execute() => _door.Open();
    public void Undo() => _door.Close();
}

public class DoorCloseCommand : ICommand
{
    private readonly Door _door;
    public DoorCloseCommand(Door door) => _door = door;
    public void Execute() => _door.Close();
    public void Undo() => _door.Open();
}

public class ThermostatIncreaseCommand : ICommand
{
    private readonly Thermostat _thermostat;
    public ThermostatIncreaseCommand(Thermostat thermostat) => _thermostat = thermostat;
    public void Execute() => _thermostat.IncreaseTemperature();
    public void Undo() => _thermostat.DecreaseTemperature();
}

public class ThermostatDecreaseCommand : ICommand
{
    private readonly Thermostat _thermostat;
    public ThermostatDecreaseCommand(Thermostat thermostat) => _thermostat = thermostat;
    public void Execute() => _thermostat.DecreaseTemperature();
    public void Undo() => _thermostat.IncreaseTemperature();
}

public class RemoteControl
{
    private ICommand _command;
    private readonly Stack<ICommand> _history = new Stack<ICommand>();

    public void SetCommand(ICommand command) => _command = command;

    public void PressButton()
    {
        _command.Execute();
        _history.Push(_command);
    }

    public void PressUndo()
    {
        if (_history.Count > 0)
            _history.Pop().Undo();
    }
}

class Program
{
    static void Main()
    {
        var light = new Light();
        var door = new Door();
        var thermostat = new Thermostat();

        var lightOn = new LightOnCommand(light);
        var lightOff = new LightOffCommand(light);
        var doorOpen = new DoorOpenCommand(door);
        var doorClose = new DoorCloseCommand(door);
        var tempIncrease = new ThermostatIncreaseCommand(thermostat);
        var tempDecrease = new ThermostatDecreaseCommand(thermostat);

        var remote = new RemoteControl();

        // Управляем светом
        remote.SetCommand(lightOn);
        remote.PressButton();
        remote.SetCommand(lightOff);
        remote.PressButton();
        remote.PressUndo();

        // Управляем дверью
        remote.SetCommand(doorOpen);
        remote.PressButton();
        remote.PressUndo();

        // Управляем термостатом
        remote.SetCommand(tempIncrease);
        remote.PressButton();
        remote.PressUndo();
    }
}
